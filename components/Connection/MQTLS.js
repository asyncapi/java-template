export function MQCipherToJava(cipher) {
  // List in line with Oracle JRE mappings from https://ibm.biz/mq-cipher-mappings
  const ciphers = {
    ECDHE_ECDSA_3DES_EDE_CBC_SHA256: 'TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA',
    ECDHE_ECDSA_AES_128_CBC_SHA256: 'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256',
    ECDHE_ECDSA_AES_128_GCM_SHA256: 'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256',
    ECDHE_ECDSA_AES_256_CBC_SHA384: 'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384',
    ECDHE_ECDSA_AES_256_GCM_SHA384: 'TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384',
    ECDHE_ECDSA_NULL_SHA256: 'TLS_ECDHE_ECDSA_WITH_NULL_SHA',
    ECDHE_ECDSA_RC4_128_SHA256: 'TLS_ECDHE_ECDSA_WITH_RC4_128_SHA',
    ECDHE_RSA_3DES_EDE_CBC_SHA256: 'TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA',
    ECDHE_RSA_AES_128_CBC_SHA256: 'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256',
    ECDHE_RSA_AES_128_GCM_SHA256: 'TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256',
    ECDHE_RSA_AES_256_CBC_SHA384: 'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384',
    ECDHE_RSA_AES_256_GCM_SHA384: 'TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384',
    ECDHE_RSA_NULL_SHA256: 'TLS_ECDHE_RSA_WITH_NULL_SHA',
    ECDHE_RSA_RC4_128_SHA256: 'TLS_ECDHE_RSA_WITH_RC4_128_SHA',
    TLS_RSA_WITH_3DES_EDE_CBC_SHA: 'TLS_RSA_WITH_3DES_EDE_CBC_SHA',
    TLS_RSA_WITH_AES_128_CBC_SHA: 'TLS_RSA_WITH_AES_128_CBC_SHA',
    TLS_RSA_WITH_AES_128_CBC_SHA256: 'TLS_RSA_WITH_AES_128_CBC_SHA256',
    TLS_RSA_WITH_AES_128_GCM_SHA256: 'TLS_RSA_WITH_AES_128_GCM_SHA256',
    TLS_RSA_WITH_AES_256_CBC_SHA: 'TLS_RSA_WITH_AES_256_CBC_SHA',
    TLS_RSA_WITH_AES_256_CBC_SHA256: 'TLS_RSA_WITH_AES_256_CBC_SHA256',
    TLS_RSA_WITH_AES_256_GCM_SHA384: 'TLS_RSA_WITH_AES_256_GCM_SHA384',
    TLS_RSA_WITH_DES_CBC_SHA: 'SSL_RSA_WITH_DES_CBC_SHA',
    TLS_RSA_WITH_NULL_SHA256: 'TLS_RSA_WITH_NULL_SHA256',
    TLS_RSA_WITH_RC4_128_SHA256: 'SSL_RSA_WITH_RC4_128_SHA',
    ANY_TLS12: '*TLS12',
    TLS_AES_128_GCM_SHA256: 'TLS_AES_128_GCM_SHA256',
    TLS_AES_256_GCM_SHA384: 'TLS_AES_256_GCM_SHA384',
    TLS_CHACHA20_POLY1305_SHA256: 'TLS_CHACHA20_POLY1305_SHA256',
    TLS_AES_128_CCM_SHA256: 'TLS_AES_128_CCM_SHA256',
    TLS_AES_128_CCM_8_SHA256: 'TLS_AES_128_CCM_8_SHA256',
    ANY: '*ANY',
    ANY_TLS13: '*TLS13',
    ANY_TLS12_OR_HIGHER: '*TLS12ORHIGHER',
    ANY_TLS13_OR_HIGHER: '*TLS13ORHIGHER'
  };
  
  if (ciphers[cipher] === undefined) {
    throw new Error('An invalid cipher spec was provided. Please see https://ibm.biz/mq-cipher-mappings');
  }
  
  return ciphers[cipher];
}